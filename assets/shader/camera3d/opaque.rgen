#version 460
#extension GL_EXT_ray_tracing : require

// this shader launches a ray into the direction of each light source checking for intersections.
// If an intersection is found, the pixel is in shadow, if not, the pixel is illuminated by the light source.

#define MAX_STAGE_TEXTURES 1024
#define MAX_STAGE_MATERIALS 32
#define MAX_STAGE_LIGHTS 192

#define AMBIENT 1
#define DIRECTIONAL 2
#define POINT 3
#define SPOT 4
#define AREA 5

const float pi = 3.14159265359;

struct payload {
	vec3 Origin;
	vec3 Direction;
	int Hit;
	int HitInstanceID;
	vec3 HitLocation;
	vec2 UV;
	int MaterialIndex;
};

// Standard material info struct
struct material {
	int 	Transparency;
	float 	AlbedoVertexWeight;
	float 	AlbedoTextureWeight;
	float 	AlbedoWeight;
	int 	AlbedoTextureIndex;
	vec3 	Albedo;
	float 	OpacityTextureWeight;
	float 	OpacityWeight;
	int 	OpacityTextureIndex;
	float 	Opacity;
	float 	NormalVertexWeight;
	float 	NormalTextureWeight;
	int 	NormalTextureIndex;
	int 	HeightTextureIndex;
	float 	HeightScale;
	int 	HeightStepCount;
	float 	AmbientLightingTextureWeight;
	float 	AmbientLightingWeight;
	int 	AmbientLightingTextureIndex;
	vec3 	AmbientLighting;
	float 	EmissiveTextureWeight;
	float 	EmissiveWeight;
	int 	EmissiveTextureIndex;
	vec3 	Emissive;
	float 	SpecularTextureWeight;
	float 	SpecularWeight;
	int 	SpecularTextureIndex;
	vec3 	Specular;
	float 	ShininessTextureWeight;
	float 	ShininessWeight;
	int 	ShininessTextureIndex;
	float 	Shininess;
	float 	AmbientOcclusionTextureWeight;
	float 	AmbientOcclusionWeight;
	int 	AmbientOcclusionTextureIndex;
	float 	AmbientOcclusion;
	float 	MetallicTextureWeight;
	float 	MetallicWeight;
	int 	MetallicTextureIndex;
	float 	Metallic;
	float 	RoughnessTextureWeight;
	float 	RoughnessWeight;
	int 	RoughnessTextureIndex;
	float 	Roughness;
	float 	IORVertexWeight;
	float 	IORTextureWeight;
	float 	IORWeight;
	int 	IORTextureIndex;
	float 	IOR;
	float 	SheenColorTextureWeight;
	float 	SheenColorWeight;
	int 	SheenColorTextureIndex;
	vec3 	SheenColor;
	float 	SheenIntensityTextureWeight;
	float 	SheenIntensityWeight;
	float 	SheenRoughnessTextureWeight;
	float 	SheenRoughnessWeight;
	int 	SheenMaskTextureIndex;
	float 	SheenRoughness;
	float 	SheenIntensity;
	float 	ClearCoatStrengthTextureWeight;
	float 	ClearCoatStrengthWeight;
	float 	ClearCoatRoughnessTextureWeight;
	float 	ClearCoatRoughnessWeight;
	int 	ClearCoatStrengthRoughnessTextureIndex;
	float 	ClearCoatStrength;
	float 	ClearCoatRoughness;
	float 	ClearCoatNormalTextureWeight;
	float 	ClearCoatNormalWeight;
	int 	ClearCoatNormalTextureIndex;
	vec3 	ClearCoatNormal;
	float 	ClearCoatTintTextureWeight;
	float 	ClearCoatTintWeight;
	int 	ClearCoatTintTextureIndex;
	vec3 	ClearCoatTint;
	float 	ClearCoatIOR;
	float 	ClearCoatThickness;
};

struct light {
	int 	Type;
	float 	Intensity;
	vec3 	Color;
	vec3 	Position;
	vec3 	Direction;
	float 	SpotAngle;
};

// Ray Payload
layout(location = 0) rayPayloadEXT payload Ray;
// Scene Geometry
layout(set = 0, binding = 0) uniform accelerationStructureEXT TLAS;
// Scene Material Textures
layout(set = 0, binding = 1) uniform sampler2D MaterialColor[MAX_STAGE_TEXTURES];
layout(set = 0, binding = 2) uniform sampler2D MaterialOpacity[MAX_STAGE_TEXTURES];
layout(set = 0, binding = 3) uniform sampler2D MaterialNormalMap[MAX_STAGE_TEXTURES];
layout(set = 0, binding = 4) uniform sampler2D MaterialHeightMap[MAX_STAGE_TEXTURES];
layout(set = 0, binding = 5) uniform sampler2D MaterialEmissive[MAX_STAGE_TEXTURES];
layout(set = 0, binding = 6) uniform sampler2D MaterialSpecular[MAX_STAGE_TEXTURES];
layout(set = 0, binding = 7) uniform sampler2D MaterialShininess[MAX_STAGE_TEXTURES];
layout(set = 0, binding = 8) uniform sampler2D MaterialAmbientOcclusion[MAX_STAGE_TEXTURES];
layout(set = 0, binding = 9) uniform sampler2D MaterialRoughness[MAX_STAGE_TEXTURES];
layout(set = 0, binding = 10) uniform sampler2D MaterialMetallic[MAX_STAGE_TEXTURES];
layout(set = 0, binding = 11) uniform sampler2D MaterialSheen[MAX_STAGE_TEXTURES];
layout(set = 0, binding = 12) uniform sampler2D MaterialClearCoat[MAX_STAGE_TEXTURES];
// Full materials for every mesh instace in the scene.
layout(set = 0, binding = 13) uniform MaterialUBO {
	material Data[MAX_STAGE_MATERIALS];
	int Count;
} Material;
// Deferred shading for light sources for both lighting and shadows.
layout(set = 0, binding = 14) uniform LightUBO {
	light Source[MAX_STAGE_LIGHTS];
	int Count;
} Light;
// Geometry Buffer Data
layout(set = 1, binding = 0, rgba32f) uniform image2D OutputColor;
layout(set = 1, binding = 1, rgba32f) uniform image2D PixelColor;
layout(set = 1, binding = 2, rgba32f) uniform image2D PixelPosition;
layout(set = 1, binding = 3, rgba32f) uniform image2D PixelNormal;
layout(set = 1, binding = 4, rgba32f) uniform image2D PixelSS;
layout(set = 1, binding = 5, rgba32f) uniform image2D PixelORM;
// Camera Data
layout (set = 2, binding = 0) uniform SubjectUBO {
	vec3 Position;
	mat4 Rotation;
	mat4 Projection;
	mat4 PRT;
} Subject;

// ----- PBR Rendering Functions ----- //

float normal_distribution(float aNdotH, float aRoughness) {
	// Defines the specular highlight of light reflection.
	float a = aRoughness * aRoughness;  // Squared roughness (alpha^2)
	
	// Compute GGX denominator (squared term in denominator)
	float aDenom = ((aNdotH * aNdotH) * (a - 1.0) + 1.0);
	
	// Compute GGX normal distribution function
	return (a / (pi * aDenom * aDenom)); // Correct squaring of denominator
}

float geometric_attenuation(float aHdotN, float aVdotH, float aNdotV, float aNdotL) {
	return min(1.0, min(2.0 * aHdotN * aNdotV / aVdotH, 2.0 * aHdotN * aNdotL / aVdotH));
}

float fresnel_schlick(float aVdotH, float aF0) {
	float Factor = 1.0 - aVdotH;
	float Factor5 = Factor * Factor * Factor * Factor * Factor; // Faster than pow()
	return aF0 + (1.0 - aF0) * Factor5;
}

float rs(vec3 aL, vec3 aN, vec3 aV, float aRoughness, float aMetallic) {
	// Load onto stack for multi usage.
	vec3 h = normalize(aL + aV);
	float HdotN = max(dot(h, aN), 0.001);
	float VdotH = max(dot(aV, h), 0.001);
	float NdotV = max(dot(aN, aV), 0.001);
	float NdotL = max(dot(aN, aL), 0.001);
	float F0 = mix(0.04, 1.0, aMetallic);

	// Load cook torrance terms.
	float D = normal_distribution(dot(aN, h), aRoughness);
	float G = geometric_attenuation(HdotN, VdotH, NdotV, NdotL);
	float F = fresnel_schlick(dot(h, aV), F0);

	// return full specular term of the BRDF.
	return (D * G * F) / (4.0 * NdotL * NdotV);
}

void main() {
	// CRITICAL: Initialize ray payload before ANY traceRayEXT calls
	Ray.Origin = vec3(0.0);
	Ray.Direction = vec3(0.0);
	Ray.Hit = 0;
	Ray.HitInstanceID = 0;  // Initialize to 0, miss shader will set to -1
	Ray.HitLocation = vec3(0.0);
	Ray.UV = vec2(0.0);
	Ray.MaterialIndex = 0;

	// Get Index per ray.
	vec3 FinalColor = vec3(0.0, 0.0, 0.0);
	ivec2 RayIndex = ivec2(gl_LaunchIDEXT.xy);
	ivec2 Resolution = imageSize(PixelColor);

	// Load G-buffer data
	vec4 Albedo = imageLoad(PixelColor, RayIndex);
	vec3 WorldPosition = imageLoad(PixelPosition, RayIndex).xyz;
	vec3 WorldNormal = imageLoad(PixelNormal, RayIndex).xyz;
	float Specular = imageLoad(PixelSS, RayIndex).r;
	float Shininess = imageLoad(PixelSS, RayIndex).g;
	float AmbientOcclusion = imageLoad(PixelORM, RayIndex).r;
	float Roughness = imageLoad(PixelORM, RayIndex).g;
	float Metallic = imageLoad(PixelORM, RayIndex).b;

	// Skip lighting calculation for pixels with no geometry (alpha = 0)
	if (Albedo.a == 0.0) {
		imageStore(OutputColor, RayIndex, vec4(0.0, 0.0, 0.0, 0.0));
		return;
	}

	// View direction of the camera.
	vec3 ViewDir = normalize(Subject.Position - WorldPosition);

	// Ray origin will start at the world position of the fragment.
	Ray.Origin = WorldPosition;

	// Iterate through each light source adding contributions per light source based on intersection with object in TLAS.
	for (int i = 0; i < Light.Count; i++) {
		switch(Light.Source[i].Type) {
			case AMBIENT:
				// Ambient light does not cast shadows, just add ambient color
				FinalColor += Albedo.rgb * AmbientOcclusion * Light.Source[i].Color * Light.Source[i].Intensity;
				continue; // Skip to next light source
			case DIRECTIONAL: {
					// This lighting is a point light of some variation, it has a source position.
					vec3 LightDir = Light.Source[i].Position - WorldPosition;
					float LightDistance = length(LightDir);
					LightDir = normalize(LightDir);

					// Check if surface faces the light (back-face culling for lighting)
					float NdotL = dot(WorldNormal, LightDir);
					if (NdotL <= 0.0) continue;
					
					// Directional light is treated as a ray with infinite distance. Ray tracing should check for intersection with geometry.
					// If no intersection, the pixel is illuminated by the light source.
					Ray.Origin = WorldPosition + WorldNormal * 0.001;
					Ray.Direction = normalize(Light.Source[i].Direction);
					Ray.Hit = 0;

					// ! Disabled for Raytracing debugging
					// Trace shadow ray to check for occlusion
					// traceRayEXT(
					// 	TLAS,
					// 	gl_RayFlagsOpaqueEXT | gl_RayFlagsTerminateOnFirstHitEXT,
					// 	0xFF,
					// 	0, 0, 0,
					// 	Ray.Origin,
					// 	0.0,
					// 	Ray.Direction,
					// 	LightDistance,
					// 	0
					// );

					if (Ray.Hit == 1) continue; // If hit, skip lighting calculation

					// Calculate light attenuation (inverse square law)
					float Attenuation = Light.Source[i].Intensity;

					// Calculate diffuse term (Lambertian)
					vec3 Diffuse = Albedo.rgb * NdotL;

					// Calculate specular term using PBR
					vec3 Specular = vec3(rs(LightDir, WorldNormal, ViewDir, Roughness, Metallic));

					// Combine diffuse and specular based on metallic workflow
					vec3 F0 = mix(vec3(0.04), Albedo.rgb, Metallic); // Base reflectance
					vec3 kS = vec3(fresnel_schlick(max(dot(normalize(LightDir + ViewDir), ViewDir), 0.0), F0.r));
					vec3 kD = (vec3(1.0) - kS) * (1.0 - Metallic); // Metallic surfaces have no diffuse

					// Final lighting contribution for this light
					vec3 LightContribution = (kD * Diffuse + Specular) * Light.Source[i].Color * Attenuation;
					FinalColor += LightContribution;
				}
				break;
			case POINT: 
			case SPOT:
			case AREA: {
					// This lighting is a point light of some variation, it has a source position.
					vec3 LightDir = Light.Source[i].Position - WorldPosition;
					float LightDistance = length(LightDir);
					LightDir = normalize(LightDir);

					// Check if surface faces the light (back-face culling for lighting)
					float NdotL = dot(WorldNormal, LightDir);
					if (NdotL <= 0.0) continue;

					// Setup shadow ray with proper offset to prevent self-intersection
					Ray.Origin = WorldPosition + WorldNormal * 0.001;
					Ray.Direction = LightDir;
					Ray.Hit = 0;

					// ! Disabled for Raytracing debugging
					// Trace shadow ray to check for occlusion
					// traceRayEXT(
					// 	TLAS,
					// 	gl_RayFlagsOpaqueEXT | gl_RayFlagsTerminateOnFirstHitEXT,
					// 	0xFF,
					// 	0, 0, 0,
					// 	Ray.Origin,
					// 	0.0,
					// 	Ray.Direction,
					// 	LightDistance,
					// 	0
					// );

					// If light is obstructed, skip lighting calculation
					if (Ray.Hit == 1) continue;

					// Calculate light attenuation (inverse square law)
					float Attenuation = Light.Source[i].Intensity / (LightDistance * LightDistance);

					// Calculate diffuse term (Lambertian)
					vec3 Diffuse = Albedo.rgb * NdotL;

					// Calculate specular term using PBR
					vec3 Specular = vec3(rs(LightDir, WorldNormal, ViewDir, Roughness, Metallic));

					// Combine diffuse and specular based on metallic workflow
					vec3 F0 = mix(vec3(0.04), Albedo.rgb, Metallic); // Base reflectance
					vec3 kS = vec3(fresnel_schlick(max(dot(normalize(LightDir + ViewDir), ViewDir), 0.0), F0.r));
					vec3 kD = (vec3(1.0) - kS) * (1.0 - Metallic); // Metallic surfaces have no diffuse

					// Final lighting contribution for this light
					vec3 LightContribution = (kD * Diffuse + Specular) * Light.Source[i].Color * Attenuation;
					FinalColor += LightContribution;
				}
				break;
			default:
				continue;
		}
	}
	
	// Apply tone mapping (Reinhard with slight modification for better highlights)
	FinalColor = FinalColor / (FinalColor + vec3(1.0));
	
	// Apply gamma correction (optional, depending on your pipeline)
	// FinalColor = pow(FinalColor, vec3(1.0/2.2));

	// Write the final color per pixel to the output color image.
	imageStore(OutputColor, RayIndex, vec4(FinalColor, 1.0));
}